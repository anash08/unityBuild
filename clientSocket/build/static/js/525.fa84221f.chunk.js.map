{"version":3,"file":"static/js/525.fa84221f.chunk.js","mappings":"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","sources":["../node_modules/langchain/dist/util/chunk.js","../node_modules/langchain/dist/llms/openai-chat.js","../node_modules/langchain/dist/llms/openai.js"],"sourcesContent":["export const chunkArray = (arr, chunkSize) => arr.reduce((chunks, elem, index) => {\n    const chunkIndex = Math.floor(index / chunkSize);\n    const chunk = chunks[chunkIndex] || [];\n    // eslint-disable-next-line no-param-reassign\n    chunks[chunkIndex] = chunk.concat([elem]);\n    return chunks;\n}, []);\n","import { Configuration, OpenAIApi, } from \"openai\";\nimport { isNode, getEnvironmentVariable } from \"../util/env.js\";\nimport fetchAdapter from \"../util/axios-fetch-adapter.js\";\nimport { LLM } from \"./base.js\";\nimport { promptLayerTrackRequest } from \"../util/prompt-layer.js\";\n/**\n * Wrapper around OpenAI large language models that use the Chat endpoint.\n *\n * To use you should have the `openai` package installed, with the\n * `OPENAI_API_KEY` environment variable set.\n *\n * To use with Azure you should have the `openai` package installed, with the\n * `AZURE_OPENAI_API_KEY`,\n * `AZURE_OPENAI_API_INSTANCE_NAME`,\n * `AZURE_OPENAI_API_DEPLOYMENT_NAME`\n * and `AZURE_OPENAI_API_VERSION` environment variable set.\n *\n * @remarks\n * Any parameters that are valid to be passed to {@link\n * https://platform.openai.com/docs/api-reference/chat/create |\n * `openai.createCompletion`} can be passed through {@link modelKwargs}, even\n * if not explicitly available on this class.\n *\n * @augments BaseLLM\n * @augments OpenAIInput\n * @augments AzureOpenAIChatInput\n */\nexport class OpenAIChat extends LLM {\n    get callKeys() {\n        return [\"stop\", \"signal\", \"timeout\", \"options\", \"promptIndex\"];\n    }\n    get lc_secrets() {\n        return {\n            openAIApiKey: \"OPENAI_API_KEY\",\n            azureOpenAIApiKey: \"AZURE_OPENAI_API_KEY\",\n        };\n    }\n    get lc_aliases() {\n        return {\n            modelName: \"model\",\n            openAIApiKey: \"openai_api_key\",\n            azureOpenAIApiVersion: \"azure_openai_api_version\",\n            azureOpenAIApiKey: \"azure_openai_api_key\",\n            azureOpenAIApiInstanceName: \"azure_openai_api_instance_name\",\n            azureOpenAIApiDeploymentName: \"azure_openai_api_deployment_name\",\n        };\n    }\n    constructor(fields, \n    /** @deprecated */\n    configuration) {\n        super(fields ?? {});\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"temperature\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"topP\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"frequencyPenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"presencePenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"n\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"logitBias\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"maxTokens\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"modelName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"gpt-3.5-turbo\"\n        });\n        Object.defineProperty(this, \"prefixMessages\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"modelKwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"timeout\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"stop\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"streaming\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"openAIApiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiVersion\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiInstanceName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiDeploymentName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"clientConfig\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.openAIApiKey =\n            fields?.openAIApiKey ?? getEnvironmentVariable(\"OPENAI_API_KEY\");\n        this.azureOpenAIApiKey =\n            fields?.azureOpenAIApiKey ??\n                getEnvironmentVariable(\"AZURE_OPENAI_API_KEY\");\n        if (!this.azureOpenAIApiKey && !this.openAIApiKey) {\n            throw new Error(\"(Azure) OpenAI API key not found\");\n        }\n        this.azureOpenAIApiInstanceName =\n            fields?.azureOpenAIApiInstanceName ??\n                getEnvironmentVariable(\"AZURE_OPENAI_API_INSTANCE_NAME\");\n        this.azureOpenAIApiDeploymentName =\n            (fields?.azureOpenAIApiCompletionsDeploymentName ||\n                fields?.azureOpenAIApiDeploymentName) ??\n                (getEnvironmentVariable(\"AZURE_OPENAI_API_COMPLETIONS_DEPLOYMENT_NAME\") ||\n                    getEnvironmentVariable(\"AZURE_OPENAI_API_DEPLOYMENT_NAME\"));\n        this.azureOpenAIApiVersion =\n            fields?.azureOpenAIApiVersion ??\n                getEnvironmentVariable(\"AZURE_OPENAI_API_VERSION\");\n        this.modelName = fields?.modelName ?? this.modelName;\n        this.prefixMessages = fields?.prefixMessages ?? this.prefixMessages;\n        this.modelKwargs = fields?.modelKwargs ?? {};\n        this.timeout = fields?.timeout;\n        this.temperature = fields?.temperature ?? this.temperature;\n        this.topP = fields?.topP ?? this.topP;\n        this.frequencyPenalty = fields?.frequencyPenalty ?? this.frequencyPenalty;\n        this.presencePenalty = fields?.presencePenalty ?? this.presencePenalty;\n        this.n = fields?.n ?? this.n;\n        this.logitBias = fields?.logitBias;\n        this.maxTokens = fields?.maxTokens;\n        this.stop = fields?.stop;\n        this.streaming = fields?.streaming ?? false;\n        if (this.n > 1) {\n            throw new Error(\"Cannot use n > 1 in OpenAIChat LLM. Use ChatOpenAI Chat Model instead.\");\n        }\n        if (this.azureOpenAIApiKey) {\n            if (!this.azureOpenAIApiInstanceName) {\n                throw new Error(\"Azure OpenAI API instance name not found\");\n            }\n            if (!this.azureOpenAIApiDeploymentName) {\n                throw new Error(\"Azure OpenAI API deployment name not found\");\n            }\n            if (!this.azureOpenAIApiVersion) {\n                throw new Error(\"Azure OpenAI API version not found\");\n            }\n        }\n        this.clientConfig = {\n            apiKey: this.openAIApiKey,\n            ...configuration,\n            ...fields?.configuration,\n        };\n    }\n    /**\n     * Get the parameters used to invoke the model\n     */\n    invocationParams(options) {\n        return {\n            model: this.modelName,\n            temperature: this.temperature,\n            top_p: this.topP,\n            frequency_penalty: this.frequencyPenalty,\n            presence_penalty: this.presencePenalty,\n            n: this.n,\n            logit_bias: this.logitBias,\n            max_tokens: this.maxTokens === -1 ? undefined : this.maxTokens,\n            stop: options?.stop ?? this.stop,\n            stream: this.streaming,\n            ...this.modelKwargs,\n        };\n    }\n    /** @ignore */\n    _identifyingParams() {\n        return {\n            model_name: this.modelName,\n            ...this.invocationParams(),\n            ...this.clientConfig,\n        };\n    }\n    /**\n     * Get the identifying parameters for the model\n     */\n    identifyingParams() {\n        return {\n            model_name: this.modelName,\n            ...this.invocationParams(),\n            ...this.clientConfig,\n        };\n    }\n    formatMessages(prompt) {\n        const message = {\n            role: \"user\",\n            content: prompt,\n        };\n        return this.prefixMessages ? [...this.prefixMessages, message] : [message];\n    }\n    /** @ignore */\n    async _call(prompt, options, runManager) {\n        const params = this.invocationParams(options);\n        const data = params.stream\n            ? await new Promise((resolve, reject) => {\n                let response;\n                let rejected = false;\n                let resolved = false;\n                this.completionWithRetry({\n                    ...params,\n                    messages: this.formatMessages(prompt),\n                }, {\n                    signal: options.signal,\n                    ...options.options,\n                    adapter: fetchAdapter,\n                    responseType: \"stream\",\n                    onmessage: (event) => {\n                        if (event.data?.trim?.() === \"[DONE]\") {\n                            if (resolved || rejected) {\n                                return;\n                            }\n                            resolved = true;\n                            resolve(response);\n                        }\n                        else {\n                            const data = JSON.parse(event.data);\n                            if (data?.error) {\n                                if (rejected) {\n                                    return;\n                                }\n                                rejected = true;\n                                reject(data.error);\n                                return;\n                            }\n                            const message = data;\n                            // on the first message set the response properties\n                            if (!response) {\n                                response = {\n                                    id: message.id,\n                                    object: message.object,\n                                    created: message.created,\n                                    model: message.model,\n                                    choices: [],\n                                };\n                            }\n                            // on all messages, update choice\n                            for (const part of message.choices) {\n                                if (part != null) {\n                                    let choice = response.choices.find((c) => c.index === part.index);\n                                    if (!choice) {\n                                        choice = {\n                                            index: part.index,\n                                            finish_reason: part.finish_reason ?? undefined,\n                                        };\n                                        response.choices.push(choice);\n                                    }\n                                    if (!choice.message) {\n                                        choice.message = {\n                                            role: part.delta\n                                                ?.role,\n                                            content: part.delta?.content ?? \"\",\n                                        };\n                                    }\n                                    choice.message.content += part.delta?.content ?? \"\";\n                                    // eslint-disable-next-line no-void\n                                    void runManager?.handleLLMNewToken(part.delta?.content ?? \"\", {\n                                        prompt: options.promptIndex ?? 0,\n                                        completion: part.index,\n                                    });\n                                }\n                            }\n                            // when all messages are finished, resolve\n                            if (!resolved &&\n                                !rejected &&\n                                message.choices.every((c) => c.finish_reason != null)) {\n                                resolved = true;\n                                resolve(response);\n                            }\n                        }\n                    },\n                }).catch((error) => {\n                    if (!rejected) {\n                        rejected = true;\n                        reject(error);\n                    }\n                });\n            })\n            : await this.completionWithRetry({\n                ...params,\n                messages: this.formatMessages(prompt),\n            }, {\n                signal: options.signal,\n                ...options.options,\n            });\n        return data.choices[0].message?.content ?? \"\";\n    }\n    /** @ignore */\n    async completionWithRetry(request, options) {\n        if (!this.client) {\n            const endpoint = this.azureOpenAIApiKey\n                ? `https://${this.azureOpenAIApiInstanceName}.openai.azure.com/openai/deployments/${this.azureOpenAIApiDeploymentName}`\n                : this.clientConfig.basePath;\n            const clientConfig = new Configuration({\n                ...this.clientConfig,\n                basePath: endpoint,\n                baseOptions: {\n                    timeout: this.timeout,\n                    ...this.clientConfig.baseOptions,\n                },\n            });\n            this.client = new OpenAIApi(clientConfig);\n        }\n        const axiosOptions = {\n            adapter: isNode() ? undefined : fetchAdapter,\n            ...this.clientConfig.baseOptions,\n            ...options,\n        };\n        if (this.azureOpenAIApiKey) {\n            axiosOptions.headers = {\n                \"api-key\": this.azureOpenAIApiKey,\n                ...axiosOptions.headers,\n            };\n            axiosOptions.params = {\n                \"api-version\": this.azureOpenAIApiVersion,\n                ...axiosOptions.params,\n            };\n        }\n        return this.caller\n            .call(this.client.createChatCompletion.bind(this.client), request, axiosOptions)\n            .then((res) => res.data);\n    }\n    _llmType() {\n        return \"openai\";\n    }\n}\n/**\n * PromptLayer wrapper to OpenAIChat\n */\nexport class PromptLayerOpenAIChat extends OpenAIChat {\n    get lc_secrets() {\n        return {\n            promptLayerApiKey: \"PROMPTLAYER_API_KEY\",\n        };\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"promptLayerApiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"plTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"returnPromptLayerId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.plTags = fields?.plTags ?? [];\n        this.returnPromptLayerId = fields?.returnPromptLayerId ?? false;\n        this.promptLayerApiKey =\n            fields?.promptLayerApiKey ??\n                getEnvironmentVariable(\"PROMPTLAYER_API_KEY\");\n        if (!this.promptLayerApiKey) {\n            throw new Error(\"Missing PromptLayer API key\");\n        }\n    }\n    async completionWithRetry(request, options) {\n        if (request.stream) {\n            return super.completionWithRetry(request, options);\n        }\n        const response = await super.completionWithRetry(request);\n        return response;\n    }\n    async _generate(prompts, options, runManager) {\n        let choice;\n        const generations = await Promise.all(prompts.map(async (prompt) => {\n            const requestStartTime = Date.now();\n            const text = await this._call(prompt, options, runManager);\n            const requestEndTime = Date.now();\n            choice = [{ text }];\n            const parsedResp = {\n                text,\n            };\n            const promptLayerRespBody = await promptLayerTrackRequest(this.caller, \"langchain.PromptLayerOpenAIChat\", [prompt], this._identifyingParams(), this.plTags, parsedResp, requestStartTime, requestEndTime, this.promptLayerApiKey);\n            if (this.returnPromptLayerId === true &&\n                promptLayerRespBody.success === true) {\n                choice[0].generationInfo = {\n                    promptLayerRequestId: promptLayerRespBody.request_id,\n                };\n            }\n            return choice;\n        }));\n        return { generations };\n    }\n}\n","import { Configuration, OpenAIApi, } from \"openai\";\nimport { isNode, getEnvironmentVariable } from \"../util/env.js\";\nimport fetchAdapter from \"../util/axios-fetch-adapter.js\";\nimport { chunkArray } from \"../util/chunk.js\";\nimport { BaseLLM } from \"./base.js\";\nimport { calculateMaxTokens } from \"../base_language/count_tokens.js\";\nimport { OpenAIChat } from \"./openai-chat.js\";\nimport { promptLayerTrackRequest } from \"../util/prompt-layer.js\";\n/**\n * Wrapper around OpenAI large language models.\n *\n * To use you should have the `openai` package installed, with the\n * `OPENAI_API_KEY` environment variable set.\n *\n * To use with Azure you should have the `openai` package installed, with the\n * `AZURE_OPENAI_API_KEY`,\n * `AZURE_OPENAI_API_INSTANCE_NAME`,\n * `AZURE_OPENAI_API_DEPLOYMENT_NAME`\n * and `AZURE_OPENAI_API_VERSION` environment variable set.\n *\n * @remarks\n * Any parameters that are valid to be passed to {@link\n * https://platform.openai.com/docs/api-reference/completions/create |\n * `openai.createCompletion`} can be passed through {@link modelKwargs}, even\n * if not explicitly available on this class.\n */\nexport class OpenAI extends BaseLLM {\n    get callKeys() {\n        return [\"stop\", \"signal\", \"timeout\", \"options\"];\n    }\n    get lc_secrets() {\n        return {\n            openAIApiKey: \"OPENAI_API_KEY\",\n            azureOpenAIApiKey: \"AZURE_OPENAI_API_KEY\",\n        };\n    }\n    get lc_aliases() {\n        return {\n            modelName: \"model\",\n            openAIApiKey: \"openai_api_key\",\n            azureOpenAIApiVersion: \"azure_openai_api_version\",\n            azureOpenAIApiKey: \"azure_openai_api_key\",\n            azureOpenAIApiInstanceName: \"azure_openai_api_instance_name\",\n            azureOpenAIApiDeploymentName: \"azure_openai_api_deployment_name\",\n        };\n    }\n    constructor(fields, \n    /** @deprecated */\n    configuration) {\n        if (fields?.modelName?.startsWith(\"gpt-3.5-turbo\") ||\n            fields?.modelName?.startsWith(\"gpt-4\") ||\n            fields?.modelName?.startsWith(\"gpt-4-32k\")) {\n            // eslint-disable-next-line no-constructor-return, @typescript-eslint/no-explicit-any\n            return new OpenAIChat(fields, configuration);\n        }\n        super(fields ?? {});\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"temperature\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0.7\n        });\n        Object.defineProperty(this, \"maxTokens\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 256\n        });\n        Object.defineProperty(this, \"topP\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"frequencyPenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"presencePenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"n\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"bestOf\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"logitBias\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"modelName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"text-davinci-003\"\n        });\n        Object.defineProperty(this, \"modelKwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"batchSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 20\n        });\n        Object.defineProperty(this, \"timeout\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"stop\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"streaming\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"openAIApiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiVersion\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiInstanceName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiDeploymentName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"clientConfig\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.openAIApiKey =\n            fields?.openAIApiKey ?? getEnvironmentVariable(\"OPENAI_API_KEY\");\n        this.azureOpenAIApiKey =\n            fields?.azureOpenAIApiKey ??\n                getEnvironmentVariable(\"AZURE_OPENAI_API_KEY\");\n        if (!this.azureOpenAIApiKey && !this.openAIApiKey) {\n            throw new Error(\"(Azure) OpenAI API key not found\");\n        }\n        this.azureOpenAIApiInstanceName =\n            fields?.azureOpenAIApiInstanceName ??\n                getEnvironmentVariable(\"AZURE_OPENAI_API_INSTANCE_NAME\");\n        this.azureOpenAIApiDeploymentName =\n            (fields?.azureOpenAIApiCompletionsDeploymentName ||\n                fields?.azureOpenAIApiDeploymentName) ??\n                (getEnvironmentVariable(\"AZURE_OPENAI_API_COMPLETIONS_DEPLOYMENT_NAME\") ||\n                    getEnvironmentVariable(\"AZURE_OPENAI_API_DEPLOYMENT_NAME\"));\n        this.azureOpenAIApiVersion =\n            fields?.azureOpenAIApiVersion ??\n                getEnvironmentVariable(\"AZURE_OPENAI_API_VERSION\");\n        this.modelName = fields?.modelName ?? this.modelName;\n        this.modelKwargs = fields?.modelKwargs ?? {};\n        this.batchSize = fields?.batchSize ?? this.batchSize;\n        this.timeout = fields?.timeout;\n        this.temperature = fields?.temperature ?? this.temperature;\n        this.maxTokens = fields?.maxTokens ?? this.maxTokens;\n        this.topP = fields?.topP ?? this.topP;\n        this.frequencyPenalty = fields?.frequencyPenalty ?? this.frequencyPenalty;\n        this.presencePenalty = fields?.presencePenalty ?? this.presencePenalty;\n        this.n = fields?.n ?? this.n;\n        this.bestOf = fields?.bestOf ?? this.bestOf;\n        this.logitBias = fields?.logitBias;\n        this.stop = fields?.stop;\n        this.streaming = fields?.streaming ?? false;\n        if (this.streaming && this.bestOf && this.bestOf > 1) {\n            throw new Error(\"Cannot stream results when bestOf > 1\");\n        }\n        if (this.azureOpenAIApiKey) {\n            if (!this.azureOpenAIApiInstanceName) {\n                throw new Error(\"Azure OpenAI API instance name not found\");\n            }\n            if (!this.azureOpenAIApiDeploymentName) {\n                throw new Error(\"Azure OpenAI API deployment name not found\");\n            }\n            if (!this.azureOpenAIApiVersion) {\n                throw new Error(\"Azure OpenAI API version not found\");\n            }\n        }\n        this.clientConfig = {\n            apiKey: this.openAIApiKey,\n            ...configuration,\n            ...fields?.configuration,\n        };\n    }\n    /**\n     * Get the parameters used to invoke the model\n     */\n    invocationParams(options) {\n        return {\n            model: this.modelName,\n            temperature: this.temperature,\n            max_tokens: this.maxTokens,\n            top_p: this.topP,\n            frequency_penalty: this.frequencyPenalty,\n            presence_penalty: this.presencePenalty,\n            n: this.n,\n            best_of: this.bestOf,\n            logit_bias: this.logitBias,\n            stop: options?.stop ?? this.stop,\n            stream: this.streaming,\n            ...this.modelKwargs,\n        };\n    }\n    _identifyingParams() {\n        return {\n            model_name: this.modelName,\n            ...this.invocationParams(),\n            ...this.clientConfig,\n        };\n    }\n    /**\n     * Get the identifying parameters for the model\n     */\n    identifyingParams() {\n        return this._identifyingParams();\n    }\n    /**\n     * Call out to OpenAI's endpoint with k unique prompts\n     *\n     * @param [prompts] - The prompts to pass into the model.\n     * @param [options] - Optional list of stop words to use when generating.\n     * @param [runManager] - Optional callback manager to use when generating.\n     *\n     * @returns The full LLM output.\n     *\n     * @example\n     * ```ts\n     * import { OpenAI } from \"langchain/llms/openai\";\n     * const openai = new OpenAI();\n     * const response = await openai.generate([\"Tell me a joke.\"]);\n     * ```\n     */\n    async _generate(prompts, options, runManager) {\n        const subPrompts = chunkArray(prompts, this.batchSize);\n        const choices = [];\n        const tokenUsage = {};\n        const params = this.invocationParams(options);\n        if (params.max_tokens === -1) {\n            if (prompts.length !== 1) {\n                throw new Error(\"max_tokens set to -1 not supported for multiple inputs\");\n            }\n            params.max_tokens = await calculateMaxTokens({\n                prompt: prompts[0],\n                // Cast here to allow for other models that may not fit the union\n                modelName: this.modelName,\n            });\n        }\n        for (let i = 0; i < subPrompts.length; i += 1) {\n            const data = params.stream\n                ? await new Promise((resolve, reject) => {\n                    const choices = [];\n                    let response;\n                    let rejected = false;\n                    let resolved = false;\n                    this.completionWithRetry({\n                        ...params,\n                        prompt: subPrompts[i],\n                    }, {\n                        signal: options.signal,\n                        ...options.options,\n                        adapter: fetchAdapter,\n                        responseType: \"stream\",\n                        onmessage: (event) => {\n                            if (event.data?.trim?.() === \"[DONE]\") {\n                                if (resolved || rejected) {\n                                    return;\n                                }\n                                resolved = true;\n                                resolve({\n                                    ...response,\n                                    choices,\n                                });\n                            }\n                            else {\n                                const data = JSON.parse(event.data);\n                                if (data?.error) {\n                                    if (rejected) {\n                                        return;\n                                    }\n                                    rejected = true;\n                                    reject(data.error);\n                                    return;\n                                }\n                                const message = data;\n                                // on the first message set the response properties\n                                if (!response) {\n                                    response = {\n                                        id: message.id,\n                                        object: message.object,\n                                        created: message.created,\n                                        model: message.model,\n                                    };\n                                }\n                                // on all messages, update choice\n                                for (const part of message.choices) {\n                                    if (part != null && part.index != null) {\n                                        if (!choices[part.index])\n                                            choices[part.index] = {};\n                                        const choice = choices[part.index];\n                                        choice.text = (choice.text ?? \"\") + (part.text ?? \"\");\n                                        choice.finish_reason = part.finish_reason;\n                                        choice.logprobs = part.logprobs;\n                                        // eslint-disable-next-line no-void\n                                        void runManager?.handleLLMNewToken(part.text ?? \"\", {\n                                            prompt: Math.floor(part.index / this.n),\n                                            completion: part.index % this.n,\n                                        });\n                                    }\n                                }\n                                // when all messages are finished, resolve\n                                if (!resolved &&\n                                    !rejected &&\n                                    choices.every((c) => c.finish_reason != null)) {\n                                    resolved = true;\n                                    resolve({\n                                        ...response,\n                                        choices,\n                                    });\n                                }\n                            }\n                        },\n                    }).catch((error) => {\n                        if (!rejected) {\n                            rejected = true;\n                            reject(error);\n                        }\n                    });\n                })\n                : await this.completionWithRetry({\n                    ...params,\n                    prompt: subPrompts[i],\n                }, {\n                    signal: options.signal,\n                    ...options.options,\n                });\n            choices.push(...data.choices);\n            const { completion_tokens: completionTokens, prompt_tokens: promptTokens, total_tokens: totalTokens, } = data.usage ?? {};\n            if (completionTokens) {\n                tokenUsage.completionTokens =\n                    (tokenUsage.completionTokens ?? 0) + completionTokens;\n            }\n            if (promptTokens) {\n                tokenUsage.promptTokens = (tokenUsage.promptTokens ?? 0) + promptTokens;\n            }\n            if (totalTokens) {\n                tokenUsage.totalTokens = (tokenUsage.totalTokens ?? 0) + totalTokens;\n            }\n        }\n        const generations = chunkArray(choices, this.n).map((promptChoices) => promptChoices.map((choice) => ({\n            text: choice.text ?? \"\",\n            generationInfo: {\n                finishReason: choice.finish_reason,\n                logprobs: choice.logprobs,\n            },\n        })));\n        return {\n            generations,\n            llmOutput: { tokenUsage },\n        };\n    }\n    /** @ignore */\n    async completionWithRetry(request, options) {\n        if (!this.client) {\n            const endpoint = this.azureOpenAIApiKey\n                ? `https://${this.azureOpenAIApiInstanceName}.openai.azure.com/openai/deployments/${this.azureOpenAIApiDeploymentName}`\n                : this.clientConfig.basePath;\n            const clientConfig = new Configuration({\n                ...this.clientConfig,\n                basePath: endpoint,\n                baseOptions: {\n                    timeout: this.timeout,\n                    ...this.clientConfig.baseOptions,\n                },\n            });\n            this.client = new OpenAIApi(clientConfig);\n        }\n        const axiosOptions = {\n            adapter: isNode() ? undefined : fetchAdapter,\n            ...this.clientConfig.baseOptions,\n            ...options,\n        };\n        if (this.azureOpenAIApiKey) {\n            axiosOptions.headers = {\n                \"api-key\": this.azureOpenAIApiKey,\n                ...axiosOptions.headers,\n            };\n            axiosOptions.params = {\n                \"api-version\": this.azureOpenAIApiVersion,\n                ...axiosOptions.params,\n            };\n        }\n        return this.caller\n            .call(this.client.createCompletion.bind(this.client), request, axiosOptions)\n            .then((res) => res.data);\n    }\n    _llmType() {\n        return \"openai\";\n    }\n}\n/**\n * PromptLayer wrapper to OpenAI\n * @augments OpenAI\n */\nexport class PromptLayerOpenAI extends OpenAI {\n    get lc_secrets() {\n        return {\n            promptLayerApiKey: \"PROMPTLAYER_API_KEY\",\n        };\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"promptLayerApiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"plTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"returnPromptLayerId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.plTags = fields?.plTags ?? [];\n        this.promptLayerApiKey =\n            fields?.promptLayerApiKey ??\n                getEnvironmentVariable(\"PROMPTLAYER_API_KEY\");\n        this.returnPromptLayerId = fields?.returnPromptLayerId;\n        if (!this.promptLayerApiKey) {\n            throw new Error(\"Missing PromptLayer API key\");\n        }\n    }\n    async completionWithRetry(request, options) {\n        if (request.stream) {\n            return super.completionWithRetry(request, options);\n        }\n        const response = await super.completionWithRetry(request);\n        return response;\n    }\n    async _generate(prompts, options, runManager) {\n        const requestStartTime = Date.now();\n        const generations = await super._generate(prompts, options, runManager);\n        for (let i = 0; i < generations.generations.length; i += 1) {\n            const requestEndTime = Date.now();\n            const parsedResp = {\n                text: generations.generations[i][0].text,\n                llm_output: generations.llmOutput,\n            };\n            const promptLayerRespBody = await promptLayerTrackRequest(this.caller, \"langchain.PromptLayerOpenAI\", [prompts[i]], this._identifyingParams(), this.plTags, parsedResp, requestStartTime, requestEndTime, this.promptLayerApiKey);\n            let promptLayerRequestId;\n            if (this.returnPromptLayerId === true) {\n                if (promptLayerRespBody && promptLayerRespBody.success === true) {\n                    promptLayerRequestId = promptLayerRespBody.request_id;\n                }\n                generations.generations[i][0].generationInfo = {\n                    ...generations.generations[i][0].generationInfo,\n                    promptLayerRequestId,\n                };\n            }\n        }\n        return generations;\n    }\n}\nexport { OpenAIChat, PromptLayerOpenAIChat } from \"./openai-chat.js\";\n"],"names":["chunkArray","arr","chunkSize","reduce","chunks","elem","index","chunkIndex","Math","floor","chunk","concat","OpenAIChat","_LLM","_inherits","_super","_createSuper","fields","configuration","_fields$openAIApiKey","_fields$azureOpenAIAp","_fields$azureOpenAIAp2","_ref","_fields$azureOpenAIAp3","_fields$modelName","_fields$prefixMessage","_fields$modelKwargs","_fields$temperature","_fields$topP","_fields$frequencyPena","_fields$presencePenal","_fields$n","_fields$streaming","_this","_classCallCheck","call","Object","defineProperty","_assertThisInitialized","enumerable","configurable","writable","value","openAIApiKey","getEnvironmentVariable","azureOpenAIApiKey","Error","azureOpenAIApiInstanceName","azureOpenAIApiDeploymentName","azureOpenAIApiCompletionsDeploymentName","azureOpenAIApiVersion","modelName","prefixMessages","modelKwargs","timeout","temperature","topP","frequencyPenalty","presencePenalty","n","logitBias","maxTokens","stop","streaming","clientConfig","_objectSpread","apiKey","_createClass","key","get","options","_options$stop","model","this","top_p","frequency_penalty","presence_penalty","logit_bias","max_tokens","undefined","stream","model_name","invocationParams","prompt","message","role","content","_toConsumableArray","_call2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","runManager","_data$choices$0$messa","_data$choices$0$messa2","params","data","_this2","wrap","_context","prev","next","Promise","resolve","reject","response","rejected","resolved","completionWithRetry","messages","formatMessages","signal","adapter","fetchAdapter","responseType","onmessage","event","_event$data","_event$data$trim","trim","JSON","parse","error","id","object","created","choices","_step","_iterator","_createForOfIteratorHelper","_loop","part","_part$delta$content2","_part$delta3","_part$delta$content3","_part$delta4","_options$promptIndex","_part$finish_reason","_part$delta","_part$delta$content","_part$delta2","choice","find","c","finish_reason","push","delta","handleLLMNewToken","promptIndex","completion","s","done","err","e","f","every","catch","t0","sent","abrupt","_x","_x2","_x3","apply","arguments","_completionWithRetry","_callee2","request","endpoint","axiosOptions","_context2","client","basePath","Configuration","baseOptions","OpenAIApi","isNode","headers","caller","createChatCompletion","bind","then","res","_x4","_x5","LLM","PromptLayerOpenAIChat","_OpenAIChat","_super2","_fields$plTags","_fields$returnPromptL","_fields$promptLayerAp","_this3","plTags","returnPromptLayerId","promptLayerApiKey","_completionWithRetry2","_callee3","_context3","_get","_getPrototypeOf","prototype","_x6","_x7","_generate2","_callee5","prompts","generations","_this4","_context5","all","map","_ref2","_callee4","requestStartTime","text","requestEndTime","parsedResp","promptLayerRespBody","_context4","Date","now","_call","promptLayerTrackRequest","_identifyingParams","success","generationInfo","promptLayerRequestId","request_id","_x11","_x8","_x9","_x10","OpenAI","_BaseLLM","_fields$modelName2","_fields$modelName3","_fields$modelName4","_fields$batchSize","_fields$maxTokens","_fields$bestOf","startsWith","_possibleConstructorReturn","batchSize","bestOf","best_of","subPrompts","tokenUsage","i","length","calculateMaxTokens","_data$usage","completionTokens","promptTokens","totalTokens","_tokenUsage$completio","_tokenUsage$promptTok","_tokenUsage$totalToke","_choice$text2","_part$text","_part$text2","logprobs","usage","completion_tokens","prompt_tokens","total_tokens","delegateYield","promptChoices","_choice$text","finishReason","llmOutput","createCompletion","BaseLLM","PromptLayerOpenAI","_OpenAI","_generate3","llm_output"],"sourceRoot":""}